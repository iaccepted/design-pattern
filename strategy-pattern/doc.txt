/**********************************************************************
time:2016.2.9
author: guo hong zhi
website: www.iaccepted.net
github : https ://github.com/iaccepted
theme: design pattern ----> strategy pattern
************************************************************************/


strategy pattern
定义了算法族，分别进行封装，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。主要用到C++的运行时动态绑定。

本例中的算法是攻击行为，不同的游戏角色有不同的攻击方式：
法师  闪电攻击
战士  剑
枪手  机枪

所以我们定义一个攻击行为（AttackBehavior）的虚基类,然后定义接口方法performAttack,然后每种攻击行为都
继承自AttackBehavior，并且实现其自己的攻击方式（算法）,这样角色中只需要保持有一个AttackBehavior的指针
就可以了。

------------------
|      layer     |
------------------
| AttackBehavior |
------------------
| performAttack()|
__________________



----------------------
| AttackBehavior     |
----------------------
|virtual attack() = 0|
----------------------


--------------------------------------------
| AttackWithGun : public AttackBehavior    |
--------------------------------------------
|		attack(){...}                      |
--------------------------------------------

...